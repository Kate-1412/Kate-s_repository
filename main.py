from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackContext, ConversationHandler, filters
)
import matplotlib.pyplot as plt
from io import BytesIO
from database import db

AMOUNT, CATEGORY = range(2)

# –û–±—â–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
cancel_markup = ReplyKeyboardMarkup([['/cancel']], resize_keyboard=True, one_time_keyboard=True)


async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    db.add_user(user.id, user.first_name, user.username)

    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥: /expense\n"
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥: /income\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: /stats\n"
        "üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: /export\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º",
        parse_mode="HTML"
    )


async def expense_command(update: Update, context: CallbackContext) -> int:
    context.user_data['is_income'] = False
    await update.message.reply_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=cancel_markup
    )
    return AMOUNT


async def income_command(update: Update, context: CallbackContext) -> int:
    context.user_data['is_income'] = True
    await update.message.reply_text(
        "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:",
        reply_markup=cancel_markup
    )
    return AMOUNT


async def amount_received(update: Update, context: CallbackContext) -> int:
    try:
        amount = float(update.message.text)
        context.user_data['amount'] = amount

        if context.user_data.get('is_income', False):
            db.add_transaction(update.effective_user.id, amount, None, True)
            await update.message.reply_text(
                f"‚úÖ –î–æ—Ö–æ–¥ {amount:.2f}‚ÇΩ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END

        await update.message.reply_text(
            "üìù –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –µ–¥–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç):",
            reply_markup=cancel_markup
        )
        return CATEGORY
    except ValueError:
        await update.message.reply_text(
            "üö´ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (—á–∏—Å–ª–æ)",
            reply_markup=cancel_markup
        )
        return AMOUNT


async def category_received(update: Update, context: CallbackContext) -> int:
    category = update.message.text.lower()
    amount = context.user_data['amount']

    db.add_transaction(update.effective_user.id, amount, category, False)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Ö–æ–¥ {amount:.2f}‚ÇΩ –Ω–∞ '{category}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


async def cancel(update: Update, context: CallbackContext) -> int:
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


async def show_stats(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    periods = {
        'current_month': '–¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü',
        'last_month': '–ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü',
        'last_30_days': '30 –¥–Ω–µ–π',
        'last_12_months': '12 –º–µ—Å—è—Ü–µ–≤',
        'all': '–í—Å–µ –≤—Ä–µ–º—è'
    }

    stats_messages = []
    for period, name in periods.items():
        stats = db.get_stats(user_id, period)

        if not stats['total_income'] and not stats['total_expense']:
            continue

        message = (
            f"üìä <b>{name}</b>\n"
            f"–î–æ—Ö–æ–¥—ã: {stats['total_income']:.2f}‚ÇΩ\n"
            f"–†–∞—Å—Ö–æ–¥—ã: {stats['total_expense']:.2f}‚ÇΩ\n"
            f"–ë–∞–ª–∞–Ω—Å: {stats['total_income'] - stats['total_expense']:.2f}‚ÇΩ\n"
        )
        stats_messages.append(message)

    if not stats_messages:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return

    stats = db.get_stats(user_id, 'last_30_days')
    if stats['categories_expense']:
        plt.figure(figsize=(8, 6))
        plt.pie(
            stats['categories_expense'].values(),
            labels=stats['categories_expense'].keys(),
            autopct='%1.1f%%'
        )
        plt.title('–†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (30 –¥–Ω–µ–π)')

        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)

        await update.message.reply_photo(
            photo=buf,
            caption='\n'.join(stats_messages),
            parse_mode="HTML"
        )
        plt.close()
    else:
        await update.message.reply_text('\n'.join(stats_messages), parse_mode="HTML")


async def export_data(update: Update, context: CallbackContext) -> None:
    user_id = update.effective_user.id
    csv_data = db.export_to_csv(user_id)

    if not csv_data:
        await update.message.reply_text("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return

    await update.message.reply_document(
        document=InputFile(BytesIO(csv_data.encode()), filename='transactions.csv'),
        caption="üìÅ –í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ CSV"
    )


def main() -> None:
    token = "7759417622:AAGX-4NM1fWN1qEcFFo605Q7f9435BlQ-00"
    application = Application.builder().token(token).build()

    expense_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('expense', expense_command)],
        states={
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_received)],
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True
    )

    income_conv_handler = ConversationHandler(
        entry_points=[CommandHandler('income', income_command)],
        states={
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_received)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
        per_user=True
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(expense_conv_handler)
    application.add_handler(income_conv_handler)
    application.add_handler(CommandHandler("stats", show_stats))
    application.add_handler(CommandHandler("export", export_data))

    application.run_polling()
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! üöÄ")


if __name__ == '__main__':
    main()
